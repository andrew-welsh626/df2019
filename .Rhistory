}
nbinom(j-r,r,p)
dnbinom(j-r,r,p)
}
nbinom(j-r,r,p)
dnbinom(j-r,r,p)
dnbinom(j-r,r,p)
dnbinom(j-r,r,p)
dnbinom(j-r,r,p)
barplot(pb,names.arg=r:50)
#5
p=0.25
r=5
pb = 0
for (j in r:80){
pb[j-r+1]=dnbinom(j-r,r,p)
}
x=rnbinom(100000,r,p)
par(mfrow=c(1,2))
barplot(pb,names.arg=r:50)
#5
p=0.25
r=5
pb = 0
for (j in r:50){
pb[j-r+1]=dnbinom(j-r,r,p)
}
x=rnbinom(100000,r,p)
par(mfrow=c(1,2))
barplot(pb,names.arg=r:50)
#5
p=0.25
r=5
pb = 0
for (j in r:20){
pb[j-r+1]=dnbinom(j-r,r,p)
}
x=rnbinom(100000,r,p)
par(mfrow=c(1,2))
barplot(pb,names.arg=r:20)
data.frame(Freqeuncy=r:20, pb)
data.frame("Zika"=r:20, Probability=pb)
data.frame("Number of Tests for Fifth Zika-infected Mosquito"=r:20, Probability=pb)
data.frame("Number of Tests"=r:20, Probability=pb)
View(data.frame("Number of Tests"=r:20, Probability=pb))
#5
p=0.25
r=5
pb = 0
for (j in r:20){
pb[j-r+1]=dnbinom(j-r,r,p)
}
x=rnbinom(100000,r,p)
par(mfrow=c(1,2))
View(data.frame("Number of Tests"=r:20, Probability=pb))
counts <- table(x+r)
barplot(counts)
#5
p=0.25
r=5
pb = 0
for (j in r:20){
pb[j-r+1]=dnbinom(j-r,r,p)
}
x=rnbinom(100000,r,p)
par(mfrow=c(1,2))
View(data.frame("Number of Tests"=r:20, Probability=pb))
counts <- table(x+r)
barplot(counts)
counts <- table(x+r)
barplot(counts/1000000)
barplot(counts, xlab="Number of Tests for Fifth Zika-infected Mosquito", ylab="Frequency")
View(data.frame("Number of Tests"=r:20, Probability=pb))
clear
#2a
dpois(6, 8)
1 - dpois(0, 8) - dpois(1, 8) - dpois(2, 8) - dpois(3, 8) - dpois(4, 8) - dpois(5, 8)
1 - dpois(0, 8) - dpois(1, 8) - dpois(2, 8) - dpois(3, 8) - dpois(4, 8) - dpois(5, 8) - dpois(6, 8) - dpois(7, 8) - dpois(8, 8) - dpois(9, 8)
#2c
at_least_ten <- 1 - dpois(0, 20) - dpois(1, 20) - dpois(2, 20) - dpois(3, 20) - dpois(4, 20) - dpois(5, 20) - dpois(6, 20) - dpois(7, 20) - dpois(8, 20) - dpois(9, 20)
at_least_ten
1 - at_least_ten + dpois(10, 20)
#3e
#estimating 3b
count <- 0
data <- rbinom(1000000, 20, .2)
for (datum in data) {
if (datum == 0 || datum == 1 || datum == 2) count = count + 1
}
count / 1000000
#estimating 3d
count <- 0
data = rbinom(1000000, 20, .2)
for (datum in data) {
if (datum == 3 || datum == 4 || datum == 5) count = count + 1
}
count / 1000000
#4c
n <- 1:10
plot(n, .9*.1**(n-1), type="b", main="Probability of a Fraudulent Event Being Detected over the Number of Algorithms", xlab="Number of Algorithms", ylab="Probability a Fraudulent Event is Detected")
#4d
count <- 0
data = rbinom(1000000, 4, .9)
for (datum in data) {
if (datum == 0) count <- count + 1
}
count
1 - count / 1000000
#5
p=0.25
r=5
pb = 0
for (j in r:20){
pb[j-r+1]=dnbinom(j-r,r,p)
}
x=rnbinom(100000,r,p)
par(mfrow=c(1,2))
View(data.frame("Number of Tests"=r:20, Probability=pb))
counts <- table(x+r)
barplot(counts, xlab="Number of Tests for Fifth Zika-infected Mosquito", ylab="Frequency")
# 1f
n = 1000000
mu = 20
sigma = 4
rnorm(n, mu, sigma)
data[data>32].length
length(data[data>32])/n
data[data>32]
# 1f
n = 1000000
mu = 20
sigma = 4
data = rnorm(n, mu, sigma)
# Monte Carlo simulation for part b
p32 = length(data[data>32])/n
data[data>32]
length(data[data>32])
length(data[data>32])/n
# 1f
n = 1000000
mu = 20
sigma = 4
# Monte Carlo simulation for part b
p32 = length(data[data > 32])/n
data = rnorm(n, mu, sigma)
p32
# Monte Carlo simulation for part c
p14to26 = length(data[data >= 14 && data <= 26])/n
p14to26
p1stdev
# Monte Carlo simulation for part d
p1stdev = length(data[data >= mu - sigma && data <= mu + sigma])/n
# Monte Carlo simulation for part d
p1stdev = length(data[data >= mu - sigma && data <= mu + sigma])/n
clear
# 1f
n = 1000000
mu = 20
sigma = 4
data = rnorm(n, mu, sigma)
# Monte Carlo simulation for part b
p32 = length(data[data > 32])/n
p32
# Monte Carlo simulation for part c
p14to26 = length(data[data >= 14 && data <= 26])/n
p14to26
# Monte Carlo simulation for part d
p1stdev = length(data[data >= mu - sigma && data <= mu + sigma])/n
p1stdev
data[data >= 14 && data <= 26]
14:26
length(data[data %in% 14:26])
(data[data %in% 14:26])
data[data >= 14 & data <= 26]
# 1f
n <- 1000000
mu <- 20
sigma <- 4
data <- rnorm(n, mu, sigma)
# Monte Carlo simulation for part b
p32 <- length(data[data > 32])/n
p32
# Monte Carlo simulation for part c
p14to26 <- length(data[data >= 14 & data <= 26])/n
p14to26
# Monte Carlo simulation for part d
p1stdev <- length(data[data >= mu - sigma & data <= mu + sigma])/n
p1stdev
install.packages("ggplot2")
?t.test
install.packages("shiny")
install.packages(c("assertthat", "colorspace", "gtable", "rlang"))
install.packages("shiny")
library(shiny)
-v
version
install.packages("installr")
library(instalr)
library(installr)
updateR()
install.packages("shinydashboard")
source('C:/Users/andre/Desktop/DataFest Project/test.R')
runApp('C:/Users/andre/Desktop/DataFest Project/test.R')
install.packages("dplyr")
install.packages("forcats")
install.packages("haven")
install.packages("purrr")
install.packages("readr")
install.packages("readxl")
install.packages("stringr")
install.packages("tibble")
install.packages("tidyr")
install.packages("tidyverse")
install.packages("rmarkdown")
install.packages("lubridate")
library(lubridate)
library(tidyverse)
games <- read.csv("data/games.csv")
wellness <- read.csv("data/wellness.csv")
rpe <- read.csv("data/rpe.csv")
gps <- read.csv("data/gps.csv")
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
gpsSubset <- left_join(gps, wellnessSubset)
rpeSubset <- left_join(rpe, wellnessSubset)
library(lubridate)
library(tidyverse)
games <- read.csv("data/games.csv")
wellness <- read.csv("data/wellness.csv")
gps <- read.csv("data/gps.csv")
rpe <- read.csv("data/rpe.csv")
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
gpsSubset <- left_join(gps, wellnessSubset)
rpeSubset <- left_join(rpe, wellnessSubset)
setwd("C:/Users/andre/Desktop/DataFest Project/df2019")
library(lubridate)
library(tidyverse)
games <- read.csv("data/games.csv")
wellness <- read.csv("data/wellness.csv")
gps <- read.csv("data/gps.csv")
rpe <- read.csv("data/rpe.csv")
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
gpsSubset <- left_join(gps, wellnessSubset)
rpeSubset <- left_join(rpe, wellnessSubset)
View(wellnessSubset)
View(rpeSubset)
View(gpsSubset)
games <- left_join(games, gpsSubset)
games <- left_join(games, gpsSubset)
View(games)
View(games)
games <- left_join(games, gps)
library(lubridate)
library(tidyverse)
games <- read.csv("data/games.csv")
wellness <- read.csv("data/wellness.csv")
gps <- read.csv("data/gps.csv")
rpe <- read.csv("data/rpe.csv")
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
gpsSubset <- left_join(gps, wellnessSubset)
rpeSubset <- left_join(rpe, wellnessSubset)
games <- left_join(games, gps)
games <- left_join(games, gps, by="GameID")
games <- left_join(games, gpsSubset, by="GameID")
View(games)
View(wellness)
View(gps)
View(rpe)
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- right_join(wellness, games)
View(wellnessSubsetGames)
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
View(wellnessSubsetGames)
library(lubridate)
library(tidyverse)
games <- read.csv("data/games.csv")
wellness <- read.csv("data/wellness.csv")
rpe <- read.csv("data/rpe.csv")
gps <- read.csv("data/gps.csv")
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
View(wellnessSubsetGames)
wellnessSubsetGames <- left_join(wellness, games)
games <- read.csv("data/games.csv", coltypes=cols(Date= col_date(format = "%m-%d-%Y")))
wellness <- read.csv("data/wellness.csv", coltypes=cols(Date= col_date(format = "%m/%d/%Y")))
gps <- read.csv("data/gps.csv")
rpe <- read.csv("data/rpe.csv")
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
library(lubridate)
library(tidyverse)
games <- read.csv("data/games.csv", coltypes=cols(Date= col_date(format = "%m-%d-%Y")))
wellness <- read.csv("data/wellness.csv", coltypes=cols(Date= col_date(format = "%m/%d/%Y")))
gps <- read.csv("data/gps.csv")
rpe <- read.csv("data/rpe.csv")
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
library(lubridate)
library(tidyverse)
games <- read.csv("data/games.csv", coltypes=cols(Date= col_date(format = "%m-%d-%Y")))
wellness <- read.csv("data/wellness.csv", coltypes=cols(Date= col_date(format = "%m/%d/%Y")))
gps <- read.csv("data/gps.csv")
rpe <- read.csv("data/rpe.csv")
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
View(wellnessSubsetGames)
library(readr)
wellness <- read_csv("data/wellness.csv",
col_types = cols(Date = col_date(format = "%m/%d/%Y")))
View(wellness)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
games <- read_csv("data/games.csv", col_types = cols(Date = col_date(format = "%m/%d/%Y")))
View(games)
library(readr)
games <- read_csv("data/games.csv", col_types = cols(Date = col_date(format = "%Y-%m-%d")))
View(games)
library(readr)
wellness <- read_csv("data/wellness.csv",
col_types = cols(Date = col_date(format = "%m/%d/%Y")))
View(wellness)
library(lubridate)
library(tidyverse)
games <- read.csv("data/games.csv", coltypes=cols(Date= col_date(format = "%m-%d-%Y")))
wellness <- read.csv("data/wellness.csv", coltypes=cols(Date= col_date(format = "%m/%d/%Y")))
gps <- read.csv("data/gps.csv")
rpe <- read.csv("data/rpe.csv")
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
library(lubridate)
library(tidyverse)
games <- read.csv("data/games.csv", coltypes=cols(Date= col_date(format = "%m-%d-%Y")))
wellness <- read.csv("data/wellness.csv", coltypes=cols(Date= col_date(format = "%m/%d/%Y")))
gps <- read.csv("data/gps.csv")
rpe <- read.csv("data/rpe.csv")
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
library(readr)
games <- read_csv("data/games.csv", col_types = cols(Date = col_date(format = "%Y-%m-%d")))
View(games)
library(readr)
wellness <- read_csv("data/wellness.csv",
col_types = cols(Date = col_date(format = "%m/%d/%Y")))
View(wellness)
library(lubridate)
library(tidyverse)
games <- read_csv("data/games.csv", col_types = cols(Date = col_date(format = "%Y-%m-%d")))
wellness <- read_csv("data/wellness.csv", col_types = cols(Date = col_date(format = "%m/%d/%Y")))
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- wellnessSubsetGames %>% group_by(GameID)
View(byGameID)
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- aggregate(wellnessSubsetGames$Fatigue, list(wellnessSubsetGames$GameID), mean)
?aggregate
?group_by
?summarise
wellnessSubsetGames %>% group_by(GameID, summarise(mean=mean(Fatigue)))
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
wellnessSubsetGames %>% group_by(GameID, summarise(Fatigue, mean=mean(Fatigue)))
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
wellnessSubsetGames %>% group_by(GameID, summarize(Fatigue, mean=mean(Fatigue)))
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
wellnessSubsetGames %>% group_by(GameID, summarize(Fatigue, mean=mean(Fatigue)))
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- aggregate(wellnessSubsetGames$Fatigue, GameID=list(wellnessSubsetGames$GameID), mean)
?aggregate
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- aggregate(wellnessSubsetGames$Fatigue, GameID=list(wellnessSubsetGames$GameID), FUN=mean)
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- aggregate(wellnessSubsetGames, GameID=list(GameID), Fatigue=list(Fatigue), FUN=mean(Fatigue))
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- aggregate(wellnessSubsetGames, GameID=list(GameID), Fatigue=list(Fatigue), FUN=mean)
byGameID <- aggregate(wellnessSubsetGames, by=list(GameID), Fatigue=list(Fatigue), FUN=mean)
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- aggregate(wellnessSubsetGames, by=list(GameID, Fatigue), FUN=mean(Fatigue))
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- aggregate(wellnessSubsetGames, by=list(GameID, Fatigue), FUN=mean)
byGameID <- wellnessSubsetGames %>% aggregate(by=list(GameID, Fatigue), FUN=mean)
wellnessSubsetGames %>%
group_by(GameID) %>%
summarise_each(funs(mean))
?summarize
meanByGameID <- wellnessSubsetGames %>%
group_by(GameID) %>%
summarise(funs(mean))
wellnessSubsetGames %>%
group_by(GameID) %>%
summarise(funs(mean))
?summarise_each
?summarize
wellnessSubsetGames %>%
group_by(GameID) %>%
summarise(avgFatigue=funs(mean(Fatigue)))
wellnessSubsetGames %>%
group_by(GameID) %>%
summarise(avgFatigue=mean(Fatigue))
wellnessSubsetGames %>%
group_by(GameID, Outcome) %>%
summarise(avgFatigue=mean(Fatigue))
byGameID <- wellnessSubsetGames %>%
group_by(GameID, Outcome) %>%
summarise(avgFatigue=mean(Fatigue))
hist(byGameID)
barplot(wellnessSubsetGames$Outcome, wellnessSubsetGames$avgFatigue)
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- wellnessSubsetGames %>%
group_by(GameID, Outcome) %>%
summarise(avgFatigue=mean(Fatigue))
barplot(wellnessSubsetGames$Outcome, wellnessSubsetGames$avgFatigue)
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- wellnessSubsetGames %>%
group_by(GameID, Outcome) %>%
summarise(avgFatigue=mean(Fatigue))
barplot(wellnessSubsetGames$Outcome, wellnessSubsetGames$avgFatigue)
barplot
?barplot
barplot(byGameID$Outcome, byGameID$avgFatigue)
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- wellnessSubsetGames %>%
group_by(GameID, Outcome) %>%
summarise(avgFatigue=mean(Fatigue))
barplot(byGameID$Outcome, byGameID$avgFatigue)
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- wellnessSubsetGames %>%
group_by(GameID, Outcome) %>%
summarise(avgFatigue=mean(Fatigue))
wellnessSubsetGames %>%
group_by(GameID, Outcome) %>%
summarise(avgFatigue=mean(Fatigue))
byGameID
boxplot(byGameID$avgFatigue, byGameID$Outcome)
boxplot(avgFatigue~Outcome, data=byGameID)
fit <- glm(F~avgFatigue,data=byGameID,family=binomial())
fit <- glm(F~avgFatigue,data=byGameID,family=binomial())
wellnessSubsetRPE <- inner_join(wellnessSubset, rpe)
wellnessSubsetRPE <- inner_join(wellnessSubset, rpe, by="PlayerID")
ggplot(wellnessSubsetRPE, aes(Fatigue, SessionLoad, color = SessionType)) +
geom_point()
# Fatigue over Session Load, colored by Session Type
ggplot(wellnessSubsetRPE, aes(SessionLoad, Fatigue, color = SessionType))
library(lubridate)
library(tidyverse)
games <- read_csv("data/games.csv", col_types = cols(Date = col_date(format = "%Y-%m-%d")))
wellness <- read_csv("data/wellness.csv", col_types = cols(Date = col_date(format = "%m/%d/%Y")))
gps <- read.csv("data/gps.csv")
rpe <- read.csv("data/rpe.csv")
wellnessSubset <- wellness[sample(nrow(wellness), 200),]
wellnessSubsetGames <- inner_join(wellness, games)
byGameID <- wellnessSubsetGames %>%
group_by(GameID, Outcome) %>%
summarise(avgFatigue=mean(Fatigue))
wellnessSubsetRPE <- inner_join(wellnessSubset, rpe, by="PlayerID")
# Fatigue over Session Load, colored by Session Type
ggplot(wellnessSubsetRPE, aes(SessionLoad, Fatigue, color = SessionType))
# Fatigue over Session Load, colored by Session Type
ggplot(wellnessSubsetRPE, aes(SessionLoad, Fatigue, color = SessionType))
View(wellnessSubsetRPE)
# Fatigue over Session Load, colored by Session Type
ggplot(wellnessSubsetRPE, aes(SessionLoad, Fatigue, color = SessionType))
# Fatigue over Session Load, colored by Session Type
ggplot(wellnessSubsetRPE, aes(SessionLoad, Fatigue, color = SessionType))
# Fatigue over Session Load, colored by Session Type
ggplot(wellnessSubsetRPE, aes(SessionLoad, Fatigue, color = SessionType)) +
geom_point()
# Fatigue over Objective Rating, colored by Session Type
ggplot(wellnessSubsetRPE, aes(ObjectiveRating, Fatigue, color = SessionType)) +
geom_point()
# Fatigue over Focus Rating, colored by Session Type
ggplot(wellnessSubsetRPE, aes(FocusRating, Fatigue, color = SessionType)) +
geom_point()
# Fatigue over Session Load, colored by Session Type
ggplot(wellnessSubsetRPE, aes(SessionLoad, Fatigue, color = SessionType)) +
geom_point()
# Group average fatigue by GameID
byGameID <- wellnessSubsetGames %>%
group_by(GameID, Outcome) %>%
summarise(avgFatigue=mean(Fatigue))
# Box plot of Fatigue categorized by win/loss
boxplot(byGameID$avgFatigue~byGameID$Outcome)
# Box plot of average MonitoringScore over a game categorized by win/loss
boxplot(byGameID$MonitoringScore~byGameID$Outcome)
# Box plot of average MonitoringScore over a game categorized by win/loss
boxplot(byGameID$MonitoringScore~byGameID$Outcome)
# Group average monitoring score by GameID
byGameIDMS <- wellnessSubsetGames %>%
group_by(GameID, Outcome) %>%
summarise(avgMS=mean(MonitoringScore))
# Box plot of average MonitoringScore over a game categorized by win/loss
boxplot(byGameIDMS$avgMS~byGameID$Outcome)
# Fatigue over Focus Rating, colored by Session Type
ggplot(wellnessSubsetRPE, aes(FocusRating, Fatigue, color = SessionType)) +
geom_point()
# Fatigue over Session Load, colored by Session Type
ggplot(wellnessSubsetRPE, aes(SessionLoad, Fatigue, color = SessionType)) +
geom_point()
